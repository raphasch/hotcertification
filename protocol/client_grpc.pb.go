// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertificationClient is the client API for Certification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertificationClient interface {
	GetCertificate(ctx context.Context, in *CSR, opts ...grpc.CallOption) (*Certificate, error)
}

type certificationClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificationClient(cc grpc.ClientConnInterface) CertificationClient {
	return &certificationClient{cc}
}

func (c *certificationClient) GetCertificate(ctx context.Context, in *CSR, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/protocol.Certification/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificationServer is the server API for Certification service.
// All implementations must embed UnimplementedCertificationServer
// for forward compatibility
type CertificationServer interface {
	GetCertificate(context.Context, *CSR) (*Certificate, error)
	mustEmbedUnimplementedCertificationServer()
}

// UnimplementedCertificationServer must be embedded to have forward compatible implementations.
type UnimplementedCertificationServer struct {
}

func (UnimplementedCertificationServer) GetCertificate(context.Context, *CSR) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedCertificationServer) mustEmbedUnimplementedCertificationServer() {}

// UnsafeCertificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertificationServer will
// result in compilation errors.
type UnsafeCertificationServer interface {
	mustEmbedUnimplementedCertificationServer()
}

func RegisterCertificationServer(s grpc.ServiceRegistrar, srv CertificationServer) {
	s.RegisterService(&Certification_ServiceDesc, srv)
}

func _Certification_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificationServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Certification/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificationServer).GetCertificate(ctx, req.(*CSR))
	}
	return interceptor(ctx, in, info, handler)
}

// Certification_ServiceDesc is the grpc.ServiceDesc for Certification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Certification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Certification",
	HandlerType: (*CertificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCertificate",
			Handler:    _Certification_GetCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
